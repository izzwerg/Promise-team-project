{"version":3,"file":"commonHelpers.js","sources":["../src/js/qoute.js"],"sourcesContent":["import axios from 'axios';\n\n\n\n\n\n    \nexport async function quoteOfDay(quoteBlock) {\n    try {\n        const keyForQuote = \"Quote-of-day\";\n        const newDate = getNewDate();\n\n         const QuoteLocalData = localStorage.getItem(keyForQuote);\n\n        if (QuoteLocalData) {\n             const parsedQuoteLocalData = JSON.parse(QuoteLocalData);\n              if (parsedQuoteLocalData.date === newDate) {\n                  renderQuote(parsedQuoteLocalData);\n                  return;\n           } \n        }\n            const quoteData = await getQuote();\n            const newLocalQuote = {\n                date: newDate,\n                author:quoteData.author,\n                quote:quoteData.quote,\n        }\n        \n            renderQuote(newLocalQuote);\n\n            localStorage.setItem(keyForQuote, JSON.stringify(newLocalQuote));\n        \n        \n    } catch (error) {\n        console.log(error);\n    }\n    \n}\n\nfunction renderQuote({ author, quote }) {\n     const blockWithQuote = {\n    quoteText: document.querySelector(\"#quote-text\"),\n    quoteAuthor: document.querySelector(\"#quote-author\"),\n}\n    blockWithQuote.quoteAuthor.innerHTML = author;\n    blockWithQuote.quoteText.innerHTML = quote;\n}\n\nfunction getNewDate() {\n    const todaysDate = new Date();\n    const day = String(todaysDate.getDate()).padStart(2, '0');\n    const mounth = String(todaysDate.getMonth()+1).padStart(2, '0');\n    const year = todaysDate.getFullYear();\n    const newDate = `${year}-${mounth}-${day}`;\n    return newDate;\n}\n\nasync function getQuote() {\n    try {\n        const QUOTE_API = \"https://energyflow.b.goit.study/api/quote\";\n        const response = await axios.get(QUOTE_API);\n        return response.data;\n    } catch (error) {\n        throw new Error(\"Failed to fetch quote from the API.\");\n    }\n}\nquoteOfDay();\n\n"],"names":["quoteOfDay","quoteBlock","keyForQuote","newDate","getNewDate","QuoteLocalData","parsedQuoteLocalData","renderQuote","quoteData","getQuote","newLocalQuote","error","author","quote","blockWithQuote","todaysDate","day","mounth","QUOTE_API","axios"],"mappings":"oFAOO,eAAeA,EAAWC,EAAY,CACzC,GAAI,CACA,MAAMC,EAAc,eACdC,EAAUC,IAETC,EAAiB,aAAa,QAAQH,CAAW,EAExD,GAAIG,EAAgB,CACf,MAAMC,EAAuB,KAAK,MAAMD,CAAc,EACrD,GAAIC,EAAqB,OAASH,EAAS,CACvCI,EAAYD,CAAoB,EAChC,MACN,CACH,CACG,MAAME,EAAY,MAAMC,IAClBC,EAAgB,CAClB,KAAMP,EACN,OAAOK,EAAU,OACjB,MAAMA,EAAU,KACvB,EAEGD,EAAYG,CAAa,EAEzB,aAAa,QAAQR,EAAa,KAAK,UAAUQ,CAAa,CAAC,CAGtE,OAAQC,EAAO,CACZ,QAAQ,IAAIA,CAAK,CACpB,CAEL,CAEA,SAASJ,EAAY,CAAE,OAAAK,EAAQ,MAAAC,GAAS,CACnC,MAAMC,EAAiB,CACxB,UAAW,SAAS,cAAc,aAAa,EAC/C,YAAa,SAAS,cAAc,eAAe,CACvD,EACIA,EAAe,YAAY,UAAYF,EACvCE,EAAe,UAAU,UAAYD,CACzC,CAEA,SAAST,GAAa,CAClB,MAAMW,EAAa,IAAI,KACjBC,EAAM,OAAOD,EAAW,QAAS,CAAA,EAAE,SAAS,EAAG,GAAG,EAClDE,EAAS,OAAOF,EAAW,SAAQ,EAAG,CAAC,EAAE,SAAS,EAAG,GAAG,EAG9D,MADgB,GADHA,EAAW,aACD,IAAIE,CAAM,IAAID,CAAG,EAE5C,CAEA,eAAeP,GAAW,CACtB,GAAI,CACA,MAAMS,EAAY,4CAElB,OADiB,MAAMC,EAAM,IAAID,CAAS,GAC1B,IACnB,MAAe,CACZ,MAAM,IAAI,MAAM,qCAAqC,CACxD,CACL,CACAlB,EAAY"}